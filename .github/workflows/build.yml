name: build
on:
  pull_request:
    types: [opened, synchronize, reopened] # Only run for these pull request activities
  push:
    branches:
      - main # Or your default branch like 'master'

jobs:
  build:
    runs-on: ubuntu-24.04
    steps:
      - name: checkout repository
        uses: actions/checkout@v4
      - name: validate gradle wrapper
        uses: gradle/actions/wrapper-validation@v4
      - name: setup jdk
        uses: actions/setup-java@v4
        with:
          java-version: '21'
          distribution: 'microsoft'
      - name: make gradle wrapper executable
        run: chmod +x ./gradlew
      - name: build
        run: ./gradlew build
      - name: capture build artifacts
        uses: actions/upload-artifact@v4
        with:
          name: Artifacts
          path: build/libs/

  release:
    # This job will only run if the 'build' job succeeds and it's a push to the main branch
    needs: build
    if: github.event_name == 'push' && github.ref == 'refs/heads/main' # Or your release branch, e.g., 'master'
    runs-on: ubuntu-24.04
    permissions:
      contents: write # This permission is required to create a release
    steps:
      - name: checkout repository
        uses: actions/checkout@v4
      - name: download all artifacts
        uses: actions/download-artifact@v4
        with:
          name: Artifacts
          path: artifacts # Path where artifacts were uploaded

      - name: get mod version
        id: get_version
        run: |
          MOD_VERSION=$(grep -E 'mod_version=' gradle.properties | cut -d'=' -f2 | tr -d '\n\r')
          echo "MOD_VERSION=$MOD_VERSION" >> $GITHUB_OUTPUT
        working-directory: .

      - name: Create Release
        id: create_release
        uses: softprops/action-gh-release@v2
        with:
          tag_name: v${{ steps.get_version.outputs.MOD_VERSION }}
          name: Release v${{ steps.get_version.outputs.MOD_VERSION }}
          body: |
            ## Release Notes v${{ steps.get_version.outputs.MOD_VERSION }}
            (Add your release notes here. You can automate this further with other actions or by parsing commit messages.)
          draft: false
          prerelease: false
          files: artifacts/*.jar
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}